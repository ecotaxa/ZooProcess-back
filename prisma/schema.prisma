// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

// model Post {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String  @db.ObjectId
// }

enum UserRole {
  ADMIN
  MANAGER
  USER
  INACTIVE_USER
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  email         String      @unique
  name          String?
  image         String?
  emailVerified DateTime?
  password      String?
  // accounts  Account[]
  // posts     Post[]
  role          UserRole    @default(USER)
  subSample     SubSample[]
  scan          Scan[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  password          String?
  // User              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId            String? @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?

  @@unique([provider, providerAccountId])
}

model Drive {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  url     String
  project Project[]
}

model Project {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      @unique
  acronym         String?
  description     String?
  // sample      Int       @default(0)
  // scan        Int       @default(0)
  samples         Sample[] //@relation( onDelete: Cascade)
  // metadata    Metadata  @relation(fields: [metadataId], references: [id])
  // metadata    Metadata  @relation(fields: [metadataId], references: [id])
  ecotaxa         Ecotaxa?    @relation(fields: ecotaxaId, references: id)
  ecotaxaId       String?     @db.ObjectId
  // metadataId  String    @db.ObjectId
  updatedAt       DateTime?   @updatedAt
  createdAt       DateTime    @default(now())
  // qcState     QCState   @relation(fields: [qCStateId], references: [id])
  // qCStateId   String    @db.ObjectId
  drive           Drive       @relation(fields: [driveId], references: [id])
  driveId         String      @db.ObjectId
  // QCState     QCState?  @relation(fields: [qCStateId], references: [id])
  // qCStateId   String?   @db.ObjectId
  // SampleView   SampleView[]
  instrument      Instrument? @relation(fields: [instrumentId], references: [id])
  instrumentId    String?     @db.ObjectId
  scanningOptions String?

  // qc        QCState? @relation(fields: [qCStateId], references: [id])
  // qCStateId String?  @db.ObjectId
  qc   QCState? @relation(fields: [qCStateId], references: [id], onDelete: Cascade)
  // Ecotaxa   Ecotaxa[]
  scan Scan[]
  task Task[]

  qCStateId String? @db.ObjectId
}

enum InstrumentModel {
  Zooscan
}

model Instrument {
  id      String          @id @default(auto()) @map("_id") @db.ObjectId
  model   InstrumentModel
  name    String
  sn      String // Serial Number
  // options ScanningOption
  Project Project[]
  scan    Scan[]

  // zooscanCalibration   ZooscanCalibration? @relation(fields: [zooscanCalibrationId], references: [id])
  // zooscanCalibrationId String?             @db.ObjectId

  ZooscanCalibration ZooscanCalibration[]

  @@unique([name, sn])
}

model ZooscanCalibration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // instrumentId String @db.ObjectId
  instrument   Instrument? @relation(fields: [instrumentId], references: [id])
  instrumentId String?     @db.ObjectId

  frame    String
  archived Boolean @default(false)

  xOffset Int
  yOffset Int
  xSize   Int
  ySize   Int
}

model ScanningOption {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  density Int

  // metadata        Metadata[]
  // metadataModel   MetadataModel? @relation(fields: [metadataModelId], references: [id])
  // metadataModelId String?        @db.ObjectId
}

model QCState {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime    @updatedAt
  // state         QCStateItem @relation(fields: [qCStateItemId], references: [id])
  state     QCStatus    @default(PENDING)
  // project       Project[]
  // qCStateItemId String      @db.ObjectId
  // subSample     SubSample[]
  Project   Project[]
  SubSample SubSample[]
}

// model QCStateItem {
//   id      String    @id @default(auto()) @map("_id") @db.ObjectId
//   name    String    @default("None")
//   QCState QCState[]
// }

enum QCStatus {
  PENDING
  DONE
  UNPROCESSED
  MISSING_SCAN
  MISSING_BACKGROUND
  TOO_MORE_ORGANISM
}

model Ecotaxa {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  ecotaxaId Int       @unique
  // projectId   Int     @unique
  name      String
  // Project   Project @relation(fields: [projectId], references: [id])
  projectId String    @db.ObjectId
  // Project   Project @relation(fields: [projectId], references: [id])
  Project   Project[]
}

// view SampleView {
//   id              String         @id @default(auto()) @map("_id") @db.ObjectId
//   name            String
//   subsample       SubSample[]
//   Project         Project        @relation(fields: [projectId], references: [id])
//   projectId       String         @db.ObjectId
//   metadata        Metadata[]
//   metadataModel   MetadataModel? @relation(fields: [metadataModelId], references: [id])
//   metadataModelId String?        @db.ObjectId
//   sampleCount     Int
//   createdAt       DateTime
//   updatedAt       DateTime
// }

model Sample {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String         @unique
  subsample       SubSample[]
  // scans          Scan[]
  // metadata   Metadata    @relation(fields: [metadataId], references: [id])
  project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String         @db.ObjectId
  // metadataId String      @db.ObjectId
  metadata        Metadata[]
  metadataModel   MetadataModel? @relation(fields: [metadataModelId], references: [id])
  metadataModelId String?        @db.ObjectId
}

model SubSample {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  // scan      Scan[] //    @relation(fields: [scanId], references: [id])
  // scan Scan[] // @relation(fields: [scanId], references: [id], name: "scan")
  scanSubsamples SubsampleScan[]

  // scanId          String?        @db.ObjectId
  // background1 Scan? @relation(fields: [background1Id], references: [id], name: "playbackground1er1")
  // background1Id          String?        @db.ObjectId
  // background2 Scan? @relation(fields: [background2Id], references: [id], name: "background2")
  // background2Id          String?        @db.ObjectId

  // scanId    String?  @db.ObjectId
  // updatedAt DateTime? @updatedAt
  createdAt DateTime @default(now())
  // metadata   Metadata @relation(fields: [metadataId], references: [id])
  // sample    Sample   @relation(fields: [sampleId], references: [id])
  sampleId  String   @db.ObjectId
  // metadataId String  @db.ObjectId
  // SampleView   SampleView? @relation(fields: [sampleViewId], references: [id])
  // sampleViewId String?     @db.ObjectId

  // operator User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  // qc        QCState? @relation(fields: [qCStateId], references: [id])
  // qCStateId String?  @db.ObjectId
  qc QCState? @relation(fields: [qCStateId], references: [id], onDelete: Cascade)
  // qc  QCStatus @default(PENDING)
  // fraction    String
  // fractionMin Ints
  // fractionMax Int
  // fractionNb  Int

  // minmesh          Int
  // minmeshsubmethod Int
  // submethod        String

  // description String

  metadata        Metadata[]
  metadataModel   MetadataModel? @relation(fields: [metadataModelId], references: [id])
  metadataModelId String?        @db.ObjectId
  sample          Sample         @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id])
  // Scan            Scan?          @relation(fields: [scanId], references: [id])
  // scanId          String?        @db.ObjectId

  // tasks       Task[]
  qCStateId String? @db.ObjectId
}

// model Metadata {
//   id                  String             @id @default(auto()) @map("_id") @db.ObjectId
//   project             MetadataProject?   @relation(fields: [metadataProjectId], references: [id])
//   sample              MetadataSample?    @relation(fields: [metadataSampleId], references: [id])
//   subsample           MetadataSubSample? @relation(fields: [metadataSubSampleId], references: [id])
//   Project             Project[]
//   Sample              Sample[]
//   SubSample           SubSample[]
//   metadataProjectId   String?            @db.ObjectId
//   metadataSampleId    String?            @db.ObjectId
//   metadataSubSampleId String?            @db.ObjectId
// }
// model Metadata {
//   id   String @id @default(auto()) @map("_id") @db.ObjectId
//   uri  String
//   type String
// }

model Metadata {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  type  String
  value String

  // Link
  sample      Sample?    @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  sampleId    String?    @db.ObjectId
  // SampleView   SampleView? @relation(fields: [sampleViewId], references: [id])
  // sampleViewId String?     @db.ObjectId
  subSample   SubSample? @relation(fields: [subSampleId], references: [id], onDelete: Cascade)
  subSampleId String?    @db.ObjectId
}

model MetadataModel {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  value       String  @unique

  // Link
  sample    Sample[]
  // SampleView  SampleView[]
  subSample SubSample[]
}

// model MetadataProject {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   Metadata Metadata[]
// }

// model MetadataSample {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   Metadata Metadata[]
// }

// model MetadataSubSample {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   Metadata Metadata[]
// }

enum ScanType {
  SCAN
  BACKGROUND
  MASK
  RAW_BACKGROUND
  VIS
  MEDIUM_BACKGROUND
  OUT
}

model Scan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String   @unique
  type      ScanType @default(SCAN)
  createdAt DateTime @default(now())

  // to know the scanner parammeters
  // scanningOptions ScanningOptionnnj

  // Link
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @db.ObjectId
  instrument     Instrument?     @relation(fields: [instrumentId], references: [id])
  instrumentId   String?         @db.ObjectId
  // Sample      Samplwe?    @relation(fields: [sampleId], references: [id])
  // sampleId    String?    @db.ObjectId
  // SubSample   SubSample? @relation(fields: [subSampleId], references: [id])
  // subSampleId String?    @db.ObjectId
  // subSample    SubSample[]
  // subSample    SubSample[]
  //  @relation(fields: [subSampleId], references: [id])
  // subSampleId  String?     @db.ObjectId
  // SubSample    SubSample?  @relation(fields: [subSampleId], references: [id], onDelete: Cascade)
  // subSampleId  String?     @db.ObjectId
  // SubSample    SubSample[]  //@relation(fields: [subSampleId], references: [id])
  scanSubsamples SubsampleScan[]

  background Boolean? // to remove use type ScanType
  archived   Boolean?  @default(false)
  deleted    Boolean   @default(false)
  deletedAt  DateTime? //@db.Timestamp()
  // arg need to fix this typing bug
  Project    Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?   @db.ObjectId
}

// ARG with mongo I need to do the link table to do a m to n relation :( , prisma can manage itself
model SubsampleScan {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  scan        Scan      @relation(fields: [scanId], references: [id])
  scanId      String    @db.ObjectId
  subsample   SubSample @relation(fields: [subsampleId], references: [id])
  subsampleId String    @db.ObjectId

  @@unique([scanId, subsampleId])
}

enum VignetteType {
  RAW
  MASK
  MERGE
}

model Vignette {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url    String
  // scan Scan
  scanId String? @db.ObjectId

  type VignetteType
  // Separator   Separator?   @relation(fields: [separatorId], references: [id])
  // separatorId String?      @db.ObjectId
}

// model Separator {
//   id     String  @id @default(auto()) @map("_id") @db.ObjectId
//   scanId String? @db.ObjectId

//   vignette Vignette[]
// }

enum TaskType {
  SEPARATE
  BACKGROUND
  DETECTION
  VIGNETTE
  PROCESS
}

enum TaskStatus {
  RUNNING
  PENDING
  FINISHED
  FAILED
  ANALYSING
}

model Task {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  exec      TaskType
  params    Json //  { "exec" : "" , "params" : { "param1" = "filepath" , ... } }
  log       String? // url to log file
  percent   Int        @default(0)
  status    TaskStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @db.ObjectId
}
