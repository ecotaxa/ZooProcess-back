openapi: 3.0.3
info:
  contact:
    email: sebastien.galvagno@imev-mer.fr
  description: API to manage scan from Zooscan
  title: ZooProcess API
  version: v1
servers:
- url: http://zooprocess.imev-mer.fr:8081/v1
tags:
- description: User related operations
  name: User
- description: Manager related operations
  name: Manager
paths:

  /projects:
    get:
      description: Return the project list
      operationId: Projects.list
      responses:
        '200':
          description: Returned the project list
          content:
            application/json:
              schema:
                title: Response get the list of projects
                type: array
                items:
                  $ref: '#/components/schemas/Project'
      tags:
      - User

    post:
      summary: Add a new project 
      description: Add a new project
      operationId: Projects.create
      requestBody:
        description: Create a new project
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      tags:
        - User

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
        '405':
          description: Invalid input

  /projects/{projectId}:
    parameters:
    - name: projectId
      in: path
      description: The project id
      example: 42
      explode: false
      required: true
      schema:
        type: string
      style: simple

    get:
      description: Return information about the project
      operationId: Projects.get

      responses:
        '200':
          description: Returned information about the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      tags:
      - User

    post:
      description: Add a new sample
      operationId: Samples.create
      requestBody:
        description: Add a new sample to project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sample'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'          

        '400':
          description: Invalid project id supplied
        '404':
          description: project id not found     
      tags:
        - User

  /drives:
    get:
      description: Return the drive list
      operationId: Drives.list
      responses:
        '200':
          description: Returned the project list
          content:
            application/json:
              schema:
                title: Response get the list of drives
                type: array
                items:
                  $ref: '#/components/schemas/Drive'
      tags:
      - User

    post:
      summary: Add a new drive 
      description: Add a new drive
      operationId: Drives.create
      requestBody:
        description: Create a new drive
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drive'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drive'          
        '405':
          description: Invalid input
        '409':
          description: Duplicate entry
      tags:
        - User

  /projects/{project}/samples:
    get:
      description: Get the list of samples associated to the project
      operationId: samples.list
      parameters:
      - description: The project id
        example: 1
        explode: false
        in: path
        name: project
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  description: the sample name
                  example: toto
                  type: string
                title: Response get the list of samples associated to the project
                type: array
          description: Returned the list of samples associated to the project
      tags:
      - User

  /projects/{project}/samples/{sample}:
    parameters:
    - description: The project name
      example: project
      explode: false
      in: path
      name: project
      required: true
      schema:
        type: string
      style: simple
    - description: The sample name
      example: sample
      explode: false
      in: path
      name: sample
      required: true
      schema:
        type: string
      style: simple
    get:
      description: Get a sample from project
      operationId: samples.get

      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/post_metadata_201_response'
                type: array
          description: Return the project sample required
      tags:
      - User


components:
  schemas:

    Drive:
      required:
        - id
        - name
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        url:
          type: string
  
    Project:
      required:
        - id
        - name
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string

    Sample:
      type: object
      required:
        - id
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        subsample:
          type: array
          items: 
            $ref: '#/components/schemas/SubSample'

    SubSample:
      type: object
      required:
        - id
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string

    post_metadata_201_response:
      example:
        comment: comment
        type: type
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        comment:
          type: string
      type: object