openapi: 3.0.3
info:
  contact:
    email: sebastien.galvagno@imev-mer.fr
  description: API to manage scan from Zooscan
  title: ZooProcess API
  version: v1
servers:
- url: http://zooprocess.imev-mer.fr:8081/v1
tags:
- description: User related operations
  name: User
- description: Manager related operations
  name: Manager
paths:

  /projects:
    get:
      description: Return the project list
      operationId: Projects.list
      responses:
        '200':
          description: Returned the project list
          content:
            application/json:
              schema:
                title: Response get the list of projects
                type: array
                items:
                  $ref: '#/components/schemas/Project'
      tags:
        - User

    post:
      summary: Add a new project 
      description: Add a new project
      operationId: Projects.create
      requestBody:
        description: Create a new project
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      tags:
        - User

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
        '405':
          description: Invalid input
        '409':
          description: Duplicate entry

  /projects/{projectId}:
    parameters:
    - name: projectId
      in: path
      description: The project id
      example: "42"
      explode: false
      required: true
      schema:
        type: string
      style: simple

    get:
      description: Return information about the project
      operationId: Projects.get

      responses:
        '200':
          description: Returned information about the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      tags:
        - User

    put:
      description: Update information about the project
      operationId: Projects.update

      responses:
        '200':
          description: Returned information about the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      tags:
        - User


    # post:
    #   description: Add a new sample
    #   operationId: Samples.create
    #   requestBody:
    #     description: Add a new sample to project
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Sample'
    #   responses:
    #     '200':
    #       description: successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Sample'          

    #     '400':
    #       description: Invalid project id supplied
    #     '404':
    #       description: project id not found     
    #   tags:
    #     - User

  /drives:
    get:
      description: Return the drive list
      operationId: Drives.list
      # operation-handler: Drives
      x-eov-operation-handle: routes/Drives
      responses:
        '200':
          description: Returned the project list
          content:
            application/json:
              schema:
                title: Response get the list of drives
                type: array
                items:
                  $ref: '#/components/schemas/Drive'
      tags:
      - User

    post:
      summary: Add a new drive 
      description: Add a new drive
      operationId: Drives.create
      requestBody:
        description: Create a new drive
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drive'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drive'          
        '405':
          description: Invalid input
        '409':
          description: Duplicate entry
      tags:
        - User

  /projects/{project}/samples:
    parameters:
      - description: The project id
        example: "655d3062983b92b6e29b3369"
        explode: false
        in: path
        name: project
        required: true
        schema:
          type: string
        style: simple
    get:
      description: Get the list of samples associated to the project
      operationId: samples.list

      responses:
        "200":
          description: Returned the list of samples associated to the project
          content:
            application/json:
              schema:
                title: Response get an array of sample
                type: array
                items:
                  $ref: '#/components/schemas/Sample'
      tags:
      - User

    post:
      summary: Add a sample 
      description: Add a new sample 
      operationId: Samples.create
      requestBody:
        description: Create a new sample
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sample'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'          
        '405':
          description: Invalid input
        '409':
          description: Duplicate entry
      tags:
        - User

  /projects/{projectId}/samples/{sampleId}:
    parameters:
    - description: The project id
      example: 655d3062983b92b6e29b3369
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        type: string
      style: simple
    - description: The sample id
      example: 655db3a95ef7f584269ff27b
      explode: false
      in: path
      name: sampleId
      required: true
      schema:
        type: string
      style: simple

    get:
      description: Get a sample from project
      operationId: samples.get

      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
          description: Return the project sample required
      tags:
      - User

    delete:
      summary: Delete a sample
      description: Delete a sample

      operationId: Samples.delete
      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
      tags:
        - User

  /projects/{projectId}/samples/{sampleId}/subsamples:
    parameters:
    - description: The project id
      example: 655d3062983b92b6e29b3369
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        type: string
      style: simple
    - description: The sample id
      example: 655db3a95ef7f584269ff27b
      explode: false
      in: path
      name: sampleId
      required: true
      schema:
        type: string
      style: simple

    get:
      description: Get the list of subsamples associated to the sample
      operationId: subsamples.list

      responses:
        "200":
          description: Returned the list of subsamples associated to the sample
          content:
            application/json:
              schema:
                title: Response get an array of subsample
                type: array
                items:
                  $ref: '#/components/schemas/SubSample'
      tags:
      - User

    post:
      description: Get the list of subsamples associated to the sample
      operationId: subsamples.create

      responses:
        "200":
          description: Returned the list of subsamples associated to the sample
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubSample'
        '405':
          description: Invalid input
        '409':
          description: Duplicate entry
      tags:
      - User

  /projects/{projectId}/samples/{sampleId}/subsamples/{subSampleId}:
    parameters:
    - description: The project id
      example: 655d3062983b92b6e29b3369
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        type: string
      style: simple
    - description: The sample id
      example: 655db3a95ef7f584269ff27b
      explode: false
      in: path
      name: sampleId
      required: true
      schema:
        type: string
      style: simple
    - description: The sub sample id
      example: 655db3a95ef7f584269ff27b
      explode: false
      in: path
      name: subSampleId
      required: true
      schema:
        type: string
      style: simple

    delete:
      summary: Delete a subsample
      description: Delete a subsample

      operationId: subsamples.delete
      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
      tags:
        - User




  /metadata:
    get:
      parameters:
        - in: query
          name: sample
          schema:
            type: boolean

      description: Get the metadata models
      operationId: MetadataModel.list
      responses:
        '200':
          description: Returned the metadata models
          content:
            application/json:
              schema:
                title: Response get the list of metadata models 
                type: array
                items:
                  $ref: '#/components/schemas/MetadataModel'
      tags:
        - User

    post:
      summary: Add a metadata model 
      description: Add a new metadata model
      operationId: MetadataModel.create
      requestBody:
        description: Create a new metadata model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataModel'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataModel'          
        '405':
          description: Invalid input
        '409':
          description: Duplicate entry
      tags:
        - User


  /metadata/{id}:
    parameters:
      - description: The metadata model id
        example: "52"
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple

    get:
      description: Get the metadata model
      operationId: MetadataModel.get

      responses:
        "200":
          description: Return the metadata model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataModel'
      tags:
      - User    

  /users:
    post:
      description: Add a new User
      operationId: Users.create
      responses:
        "200":
          description: Return the new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input  
        '409':
          description: Duplicate entry
      tags:
      - User

    get:
      description: Get the user list
      operationId: Users.list

      responses:
        "200":
          description: Return the user list
          content:
            application/json:
              schema:
                title: Response get the list of users 
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
      - User  

components:
  schemas:

    Drive:
      required:
        - id
        - name
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        url:
          type: string
  
    Project:
      required:
        - id
        - name
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string

    Sample:
      type: object
      required:
        - id
        - name
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string # ['null', string]
        subsample:
          type: array
          items: 
            $ref: '#/components/schemas/SubSample'
        # count:
        #   type: integer
        #   readOnly: true

    SubSample:
      type: object
      required:
        - id
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string

    
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        email:
          type: string
      


    MetadataModel:
      type: object
      required:
        - id
        - name
        - value
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        description:
          type: string
        value:
          type: string
